{
  "swagger": "2.0",
  "host": "localhost:4001",
  "basePath": "/",
  "info": {
    "version": "1.0.0",
    "title": "Simple Parking",
    "description": "Backend da aplicação Simple Parking",
    "license": {
      "name": "github",
      "url": "https://github.com/MarlonLira/sstec-backend"
    }
  },
  "tags": [
    {
      "name": "user",
      "description": "Operations about user",
      "externalDocs": {
        "description": "Access the repository at this link",
        "url": "https://github.com/MarlonLira/sstec-backend"
      }
    },
    {
      "name": "vehicle",
      "description": "Operations about vehicle",
      "externalDocs": {
        "description": "Access the repository at this link",
        "url": "https://github.com/MarlonLira/sstec-backend"
      }
    },
    {
      "name": "company",
      "description": "Operations about company",
      "externalDocs": {
        "description": "Access the repository at this link",
        "url": "https://github.com/MarlonLira/sstec-backend"
      }
    },
    {
      "name": "employee",
      "description": "Operations about employee",
      "externalDocs": {
        "description": "Access the repository at this link",
        "url": "https://github.com/MarlonLira/sstec-backend"
      }
    },
    {
      "name": "card",
      "description": "Operations about card",
      "externalDocs": {
        "description": "Access the repository at this link",
        "url": "https://github.com/MarlonLira/sstec-backend"
      }
    },
    {
      "name": "payment",
      "description": "Operations about payment",
      "externalDocs": {
        "description": "Access the repository at this link",
        "url": "https://github.com/MarlonLira/sstec-backend"
      }
    },
    {
      "name": "parking",
      "description": "Operations about parking",
      "externalDocs": {
        "description": "Access the repository at this link",
        "url": "https://github.com/MarlonLira/sstec-backend"
      }
    }
  ],
  "paths": {
    "/employee": {
      "get": {
        "description": "",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/vehicles/user/{id}": {
      "get": {
        "tags": [
          "vehicle"
        ],
        "produces": [
          "application/json"
        ],
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of user to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Vehicle"
            }
          },
          "400": {
            "description": "Invalid Id supplied"
          },
          "404": {
            "description": "Vehicle not found"
          }
        }
      }
    },
    "/vehicle/{id}": {
      "get": {
        "tags": [
          "vehicle"
        ],
        "produces": [
          "application/json"
        ],
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of vehicle to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Vehicle"
            }
          },
          "400": {
            "description": "Invalid Id supplied"
          },
          "404": {
            "description": "Vehicle not found"
          }
        }
      }
    },
    "/vehicle": {
      "post": {
        "tags": [
          "vehicle"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "description": "",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "vehicle object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserVehicles"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "Vehicle already exists"
          }
        }
      }
    },
    "/user": {
      "post": {
        "tags": [
          "user"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "description": "",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "User already exists"
          }
        }
      }
    },
    "/user/{id}": {
      "get": {
        "tags": [
          "user"
        ],
        "produces": [
          "application/json"
        ],
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of usuario to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid Id supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "user"
        ],
        "description": "",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    }
  },
  "definitions": {
    "ApiResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "result": {
          "type": "object"
        }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "status": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "registryCode": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      },
      "xml": {
        "name": "User"
      }
    },
    "Vehicle": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "status": {
          "type": "string",
          "format": "char(2)"
        },
        "model": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "licensePlate": {
          "type": "string"
        },
        "userId": {
          "type": "integer",
          "format": "int64"
        }
      },
      "xml": {
        "name": "Vehicle"
      }
    },
    "UserVehicles": {
      "type": "object",
      "properties": {
        "User": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "Vehicle": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "format": "int64"
            },
            "status": {
              "type": "string",
              "format": "char(2)"
            },
            "model": {
              "type": "string"
            },
            "color": {
              "type": "string"
            },
            "type": {
              "type": "string"
            },
            "licensePlate": {
              "type": "string"
            },
            "userId": {
              "type": "integer",
              "format": "int64"
            }
          }
        }
      },
      "xml": {
        "name": "UserVehicles"
      }
    },
    "Payment": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "status": {
          "type": "string",
          "format": "char(2)"
        },
        "value": {
          "type": "number",
          "format": "double"
        }
      },
      "xml": {
        "name": "Payment"
      }
    },
    "Card": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "status": {
          "type": "string",
          "format": "char(2)"
        },
        "holder": {
          "type": "string"
        },
        "number": {
          "type": "string"
        },
        "secureCode": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Card"
      }
    },
    "Company": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "status": {
          "type": "string",
          "format": "char(2)"
        },
        "name": {
          "type": "string"
        },
        "registryCode": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "email": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Company"
      }
    }
  }
}